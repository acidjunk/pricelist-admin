{"version":3,"sources":["Flavors.jsx","Tags.jsx","Users.jsx","App.jsx","serviceWorker.js","index.js"],"names":["FlavorIcon","Fastfood","FlovorListSidePanel","style","width","margin","Typography","variant","FlavorList","props","List","aside","Datagrid","TextField","source","DateField","EditButton","basePath","FlavorTitle","record","title","FlavorEdit","Edit","SimpleForm","DisabledInput","TextInput","FlavorCreate","Create","TagIcon","Mood","TagList","TagTitle","TagEdit","TagCreate","UserIcon","AccountCircle","UserList","UserTitle","UserEdit","DateInput","UserCreate","App","Admin","dataProvider","simpleRestProvider","Resource","name","list","ListGuesser","icon","CollectionsBookmark","edit","create","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.77622b03.chunk.js","sourcesContent":["import React from 'react';\nimport { List, Datagrid, Edit, Create, SimpleForm, DateField, TextField, EditButton, DisabledInput, TextInput, LongTextInput, DateInput } from 'react-admin';\nimport {Fastfood} from \"@material-ui/icons\";\nimport Typography from \"@material-ui/core/Typography\";\nexport const FlavorIcon = Fastfood;\n\n\nconst FlovorListSidePanel = () => (\n    <div style={{ width: 200, margin: '1em' }}>\n        <Typography variant=\"title\">Post details</Typography>\n        <Typography variant=\"body1\">\n            Posts will only be published one an editor approves them\n        </Typography>\n    </div>\n);\n\n\nexport const FlavorList = (props) => (\n    <List aside={<FlovorListSidePanel/>}{...props}>\n        <Datagrid>\n            <TextField source=\"id\" />\n            <TextField source=\"name\" />\n            <DateField source=\"icon\" />\n            <TextField source=\"color\" />\n            <EditButton basePath=\"/flavors\" />\n        </Datagrid>\n    </List>\n);\n\nconst FlavorTitle = ({ record }) => {\n    return <span>Flavor {record ? `\"${record.title}\"` : ''}</span>;\n};\n\nexport const FlavorEdit = (props) => (\n    <Edit title={<FlavorTitle />} {...props}>\n        <SimpleForm>\n            <DisabledInput source=\"id\" />\n            <TextInput source=\"name\" />\n            <TextInput source=\"icon\" />\n            <TextInput source=\"color\" />\n        </SimpleForm>\n    </Edit>\n);\n\nexport const FlavorCreate = (props) => (\n    <Create title=\"Create a Flavor\" {...props}>\n        <SimpleForm>\n            <TextInput source=\"name\" />\n            <TextInput source=\"icon\" />\n            <TextInput source=\"color\" />\n        </SimpleForm>\n    </Create>\n);\n","import React from 'react';\nimport { List, Datagrid, Edit, Create, SimpleForm, DateField, TextField, EditButton, DisabledInput, TextInput, LongTextInput, DateInput } from 'react-admin';\nimport {Mood} from \"@material-ui/icons\";\nexport const TagIcon = Mood;\n\nexport const TagList = (props) => (\n    <List {...props}>\n        <Datagrid>\n            <TextField source=\"id\" />\n            <TextField source=\"name\" />\n            <EditButton basePath=\"/flavors\" />\n        </Datagrid>\n    </List>\n);\n\nconst TagTitle = ({ record }) => {\n    return <span>Tag {record ? `\"${record.title}\"` : ''}</span>;\n};\n\nexport const TagEdit = (props) => (\n    <Edit title={<TagTitle />} {...props}>\n        <SimpleForm>\n            <DisabledInput source=\"id\" />\n            <TextInput source=\"name\" />\n        </SimpleForm>\n    </Edit>\n);\n\nexport const TagCreate = (props) => (\n    <Create title=\"Create a Tag\" {...props}>\n        <SimpleForm>\n            <TextInput source=\"name\" />\n        </SimpleForm>\n    </Create>\n);\n","import React from 'react';\nimport { List, Datagrid, Edit, Create, SimpleForm, DateField, TextField, EditButton, DisabledInput, TextInput, LongTextInput, DateInput } from 'react-admin';\nimport {AccountCircle} from \"@material-ui/icons\";\nexport const UserIcon = AccountCircle;\n\nexport const UserList = (props) => (\n    <List {...props}>\n        <Datagrid>\n            <TextField source=\"id\" />\n            <TextField source=\"username\" />\n            <TextField source=\"email\" />\n            <TextField source=\"first_name\" />\n            <TextField source=\"last_name\" />\n            <DateField source=\"created_at\" />\n            <TextField source=\"roles\" />\n        </Datagrid>\n    </List>\n);\n\nconst UserTitle = ({ record }) => {\n    return <span>User {record ? `\"${record.title}\"` : ''}</span>;\n};\n\nexport const UserEdit = (props) => (\n    <Edit title={<UserTitle />} {...props}>\n        <SimpleForm>\n            <DisabledInput source=\"id\" />\n            <TextInput source=\"username\" />\n            <TextInput source=\"email\" />\n            <TextInput source=\"first_name\" />\n            <TextInput source=\"last_name\" />\n            <DateInput source=\"created_at\" />\n            <TextInput source=\"roles\" />\n        </SimpleForm>\n    </Edit>\n);\n\nexport const UserCreate = (props) => (\n    <Create title=\"Create a User\" {...props}>\n        <SimpleForm>\n            <TextInput source=\"name\" />\n            <TextInput source=\"icon\" />\n            <TextInput source=\"color\" />\n        </SimpleForm>\n    </Create>\n);\n","import React, { Component } from 'react';\n\nimport { Admin, Resource, ListGuesser } from 'react-admin';\nimport simpleRestProvider from 'ra-data-simple-rest';\n\n\nimport { FlavorList, FlavorEdit, FlavorCreate, FlavorIcon } from './Flavors';\nimport { TagList, TagEdit, TagCreate, TagIcon } from './Tags';\nimport { UserList, UserEdit, UserCreate, UserIcon } from './Users';\nimport {CollectionsBookmark} from \"@material-ui/icons\";\n\nclass App extends Component {\n\n    // state = { dataProvider: null };\n    //\n    // async componentWillMount() {\n    //     this.restoreFetch = await fakeServerFactory(\n    //         process.env.REACT_APP_DATA_PROVIDER\n    //     );\n    //\n    //     const dataProvider = await dataProviderFactory(\n    //         process.env.REACT_APP_DATA_PROVIDER\n    //     );\n    //\n    //     this.setState({ dataProvider });\n    // }\n    //\n    // componentWillUnmount() {\n    //     this.restoreFetch();\n    // }\n\nrender() {\n    const apiUrl = \"https://api.prijslijst.info/v1\"\n    // const apiUrl = \"http://localhost:5000/v1\"\n\n    // const { dataProvider } = this.state;\n    //\n    // if (!dataProvider) {\n    //     return (\n    //         <div className=\"loader-container\">\n    //             <div className=\"loader\">Loading...</div>\n    //         </div>\n    //     );\n    // }\n\n\n    return (\n        <Admin dataProvider={simpleRestProvider(apiUrl)}>\n            <Resource name=\"kinds\" list={ListGuesser} icon={CollectionsBookmark}/>\n            <Resource name=\"flavors\" list={FlavorList} edit={FlavorEdit} create={FlavorCreate} icon={FlavorIcon}/>\n            <Resource name=\"tags\" list={TagList} edit={TagEdit} create={TagCreate} icon={TagIcon}/>\n            <Resource name=\"users\" list={UserList} edit={UserEdit} create={UserCreate} icon={UserIcon}/>\n        </Admin>\n    )\n}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}